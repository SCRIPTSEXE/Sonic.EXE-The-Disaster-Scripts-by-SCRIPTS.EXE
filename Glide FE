local player = game.Players.LocalPlayer

if game.PlaceId == 14722542056 then
	-- Se eliminan las líneas relacionadas con characterValue para que funcione para todos
	local ReplicatedStorage = game:GetService("ReplicatedStorage")
	local displayPlayers = ReplicatedStorage:WaitForChild("displayPlayers")
	-- local playerStats = displayPlayers:FindFirstChild(player.Name):WaitForChild("stats")
	-- local characterValue = playerStats:WaitForChild("character")
	
	-- Ahora se permite Glide a todos
	local function canUseGlide()
		return true
	end
	
	---------------------------------------------------------------------
	-- GUI del botón principal de Glide (mismo embellecimiento que el original)
	local gui = Instance.new("ScreenGui", player:WaitForChild("PlayerGui"))
	gui.Name = "GlideGUI"
	
	local container = Instance.new("Frame")
	container.Size = UDim2.new(0,60,0,60)
	container.Position = UDim2.new(1,-80,0.4,-30)
	container.BackgroundTransparency = 1
	container.Parent = gui
	container.ZIndex = 100
	
	local titleLabel = Instance.new("TextLabel")
	titleLabel.Size = UDim2.new(0,60,0,20)
	titleLabel.Position = UDim2.new(0,0,-0.4,0)
	titleLabel.BackgroundTransparency = 1
	titleLabel.Text = "Glide"
	titleLabel.TextScaled = true
	titleLabel.TextColor3 = Color3.new(1,1,1)
	titleLabel.FontFace = Font.new("rbxassetid://12187371840", Enum.FontWeight.Bold, Enum.FontStyle.Normal)
	titleLabel.TextStrokeTransparency = 0
	titleLabel.TextStrokeColor3 = Color3.new(0,0,0)
	titleLabel.Parent = container
	titleLabel.ZIndex = 105
	
	-- Elementos gráficos base (sombra, bordes, gradientes) se crean y reutilizan en ambos botones
	local shadowStain = Instance.new("Frame")
	shadowStain.Size = UDim2.new(1,10,1,10)
	shadowStain.Position = UDim2.new(0,-5,0,-5)
	shadowStain.BackgroundColor3 = Color3.new(0,0,0)
	shadowStain.BackgroundTransparency = 1
	shadowStain.Parent = container
	
	local stainGradient = Instance.new("UIGradient", shadowStain)
	stainGradient.Rotation = 45
	stainGradient.Color = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.new(0,0,0)),
		ColorSequenceKeypoint.new(1, Color3.new(0,0,0))
	})
	stainGradient.Transparency = NumberSequence.new({
		NumberSequenceKeypoint.new(0, 0.3),
		NumberSequenceKeypoint.new(1, 1)
	})
	
	local outerBorder = Instance.new("Frame")
	outerBorder.Size = UDim2.new(1,0,1,0)
	outerBorder.Position = UDim2.new(0,0,0,0)
	outerBorder.BackgroundColor3 = Color3.fromRGB(139,0,0)
	outerBorder.Parent = container
	outerBorder.ZIndex = 101
	
	local outerCorner = Instance.new("UICorner", outerBorder)
	outerCorner.CornerRadius = UDim.new(1,0)
	
	local outerGradient = Instance.new("UIGradient", outerBorder)
	outerGradient.Rotation = 90
	outerGradient.Color = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(139,0,0)),
		ColorSequenceKeypoint.new(0.5, Color3.fromRGB(170,0,0)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(139,0,0))
	})
	outerGradient.Transparency = NumberSequence.new({
		NumberSequenceKeypoint.new(0, 0),
		NumberSequenceKeypoint.new(0.5, 0),
		NumberSequenceKeypoint.new(1, 0)
	})
	
	local innerBorder = Instance.new("Frame")
	innerBorder.Size = UDim2.new(1,-8,1,-8)
	innerBorder.Position = UDim2.new(0,4,0,4)
	innerBorder.BackgroundColor3 = Color3.fromRGB(0,0,0)
	innerBorder.Parent = outerBorder
	innerBorder.ZIndex = 102
	
	local innerCorner = Instance.new("UICorner", innerBorder)
	innerCorner.CornerRadius = UDim.new(1,0)
	
	local innerGradient = Instance.new("UIGradient", innerBorder)
	innerGradient.Rotation = 90
	innerGradient.Color = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(50,50,50)),
		ColorSequenceKeypoint.new(0.5, Color3.fromRGB(100,100,100)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(50,50,50))
	})
	innerGradient.Transparency = NumberSequence.new({
		NumberSequenceKeypoint.new(0, 0),
		NumberSequenceKeypoint.new(0.5, 0),
		NumberSequenceKeypoint.new(1, 0)
	})
	
	local effectFrame = Instance.new("Frame")
	effectFrame.Size = UDim2.new(1,-6,1,-6)
	effectFrame.Position = UDim2.new(0,3,0,3)
	effectFrame.BackgroundColor3 = Color3.fromRGB(255,255,255)
	effectFrame.Parent = innerBorder
	effectFrame.ZIndex = 103
	
	local effectCorner = Instance.new("UICorner", effectFrame)
	effectCorner.CornerRadius = UDim.new(1,0)
	
	local effectFrameGradient = Instance.new("UIGradient", effectFrame)
	effectFrameGradient.Rotation = 90
	effectFrameGradient.Color = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(255,255,255)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(255,255,255))
	})
	effectFrameGradient.Transparency = NumberSequence.new({
		NumberSequenceKeypoint.new(0, 0),
		NumberSequenceKeypoint.new(1, 0)
	})
	
	local shadowAsset = Instance.new("ImageLabel")
	shadowAsset.Size = UDim2.new(1,10,1,10)
	shadowAsset.Position = UDim2.new(0,-5,0,-5)
	shadowAsset.BackgroundTransparency = 1
	shadowAsset.Image = "rbxassetid://114739599325115"
	shadowAsset.ImageTransparency = 0.1
	shadowAsset.Parent = effectFrame
	shadowAsset.ZIndex = 102
	
	local shadowAssetGradient = Instance.new("UIGradient", shadowAsset)
	shadowAssetGradient.Rotation = 90
	shadowAssetGradient.Color = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(220,220,220)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(220,220,220))
	})
	shadowAssetGradient.Transparency = NumberSequence.new({
		NumberSequenceKeypoint.new(0, 0),
		NumberSequenceKeypoint.new(1, 0)
	})
	
	-- Se elimina la creación del icono del botón Glide en este contenedor, ya que será exclusivo del botón principal.
	
	local cooldownText = Instance.new("TextLabel")
	cooldownText.Size = UDim2.new(0,30,0,30)
	cooldownText.Position = UDim2.new(0.5,-15,0.5,-15)
	cooldownText.BackgroundTransparency = 1
	cooldownText.TextScaled = true
	cooldownText.FontFace = Font.new("rbxassetid://12187371840", Enum.FontWeight.Bold, Enum.FontStyle.Normal)
	cooldownText.TextColor3 = Color3.new(1,1,1)
	cooldownText.Visible = false
	cooldownText.Parent = container
	cooldownText.ZIndex = 104
	
	local glideButton = Instance.new("ImageButton")
	glideButton.Size = UDim2.new(1,0,1,0)
	glideButton.Position = UDim2.new(0,0,0,0)
	glideButton.BackgroundTransparency = 1
	glideButton.Parent = container
	glideButton.Draggable = true
	glideButton.Active = true
	glideButton.Visible = canUseGlide()
	glideButton.ZIndex = 105
	
	---------------------------------------------------------------------
	-- Parámetros de la habilidad mejorada
	local FLOAT_FORCE = 90000
	local DESCEND_SPEED = -2
	local FASTER_DESCEND_SPEED = -15  -- Descenso más rápido al agotar la energía
	local ASCEND_SPEED = 5           -- Ascenso a 5
	local ENERGY_DURATION = 8
	local energy = ENERGY_DURATION
	local ENERGY_DRAIN_RATE = 1          -- Drenaje por segundo en modo normal
	local ASCEND_DRAIN_MULTIPLIER = 2    -- Se drena el doble cuando se eleva
	local speedBoost = 1.25              -- Aumento del 25% en la velocidad horizontal
	
	local gliding = false
	local cooldown = false
	local cooldownActive = false
	local holdingJump = false
	local glideForce
	
	-- Sonido y animaciones
	local character = player.Character or player.CharacterAdded:Wait()
	local humanoid = character:WaitForChild("Humanoid")
	
	local glideSound = Instance.new("Sound")
	glideSound.SoundId = "rbxassetid://11059585155"
	glideSound.Volume = 3  -- Volumen aumentado
	glideSound.Looped = true
	glideSound.Parent = character
	
	-- Animación de ascenso (nueva)
	local ascendAnim = Instance.new("Animation")
	ascendAnim.AnimationId = "rbxassetid://18178432722"
	
	local descendAnim = Instance.new("Animation")
	descendAnim.AnimationId = "rbxassetid://136705072136812"
	
	local normalGlideAnim = Instance.new("Animation")
	normalGlideAnim.AnimationId = "rbxassetid://104077515216832" -- Animación normal (se puede ajustar)
	
	local ascendTrack = humanoid:LoadAnimation(ascendAnim)
	local descendTrack = humanoid:LoadAnimation(descendAnim)
	local normalGlideTrack = humanoid:LoadAnimation(normalGlideAnim)
	
	---------------------------------------------------------------------
	-- Creación de la barra de energía (más arriba y más gorda)
	local energyGui = Instance.new("ScreenGui", player:WaitForChild("PlayerGui"))
	energyGui.Name = "EnergyBarGUI"
	energyGui.Enabled = false  -- Se muestra solo durante Glide
	
	local energyBarBackground = Instance.new("Frame", energyGui)
	energyBarBackground.Size = UDim2.new(0.3, 0, 0.05, 0)
	energyBarBackground.Position = UDim2.new(0.35, 0, 0.85, 0)
	energyBarBackground.BackgroundColor3 = Color3.fromRGB(255,0,0)  -- Borde rojo
	energyBarBackground.BorderSizePixel = 2
	local borderGradient = Instance.new("UIGradient", energyBarBackground)
	borderGradient.Rotation = 90
	borderGradient.Color = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(255,0,0)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(139,0,0))
	})
	
	local energyBar = Instance.new("Frame", energyBarBackground)
	energyBar.Size = UDim2.new(1, -4, 1, -4)
	energyBar.Position = UDim2.new(0,2,0,2)
	energyBar.BackgroundColor3 = Color3.fromRGB(255,165,0)  -- Relleno naranja
	local fillGradient = Instance.new("UIGradient", energyBar)
	fillGradient.Rotation = 90
	fillGradient.Color = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(255,165,0)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(255,69,0))
	})
	
	---------------------------------------------------------------------
	-- Función para crear el botón de Ascend (único cuando Glide está activo)
	-- Se crea desde cero para evitar heredar propiedades no deseadas
	local ascendButton
	local function createAscendButton()
		local ascContainer = Instance.new("Frame")
		ascContainer.Size = UDim2.new(0,60,0,60)
		ascContainer.Position = container.Position - UDim2.new(0,70,0,0)
		ascContainer.BackgroundTransparency = 1
		ascContainer.Parent = gui
		ascContainer.ZIndex = 100
		
		-- Título del botón
		local ascTitle = Instance.new("TextLabel")
		ascTitle.Size = UDim2.new(0,60,0,20)
		ascTitle.Position = UDim2.new(0,0,-0.4,0)
		ascTitle.BackgroundTransparency = 1
		ascTitle.Text = "Ascend"
		ascTitle.TextScaled = true
		ascTitle.TextColor3 = Color3.new(1,1,1)
		ascTitle.FontFace = Font.new("rbxassetid://12187371840", Enum.FontWeight.Bold, Enum.FontStyle.Normal)
		ascTitle.TextStrokeTransparency = 0
		ascTitle.TextStrokeColor3 = Color3.new(0,0,0)
		ascTitle.Parent = ascContainer
		ascTitle.ZIndex = 105
		
		-- Sombra y bordes (se clonan del botón principal)
		local ascShadow = shadowStain:Clone()
		ascShadow.Parent = ascContainer
		
		local ascOuter = outerBorder:Clone()
		ascOuter.Parent = ascContainer
		
		local ascInner = innerBorder:Clone()
		ascInner.Parent = ascOuter
		
		-- Creamos un frame para el efecto del botón (con gradiente blanco por defecto)
		local ascEffect = Instance.new("Frame")
		ascEffect.Size = UDim2.new(1, -6, 1, -6)
		ascEffect.Position = UDim2.new(0,3,0,3)
		ascEffect.BackgroundColor3 = Color3.fromRGB(255,255,255)
		ascEffect.Parent = ascInner
		ascContainer.ascEffect = ascEffect
		
		local ascEffectGradient = Instance.new("UIGradient", ascEffect)
		ascEffectGradient.Rotation = 90
		ascEffectGradient.Color = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(255,255,255)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(255,255,255))
		})
		
		-- Creamos el icono nuevo para Ascend con la imagen correcta
		local ascIcon = Instance.new("ImageLabel")
		ascIcon.Size = UDim2.new(1,0,1,0)
		ascIcon.Position = UDim2.new(0,0,0,0)
		ascIcon.BackgroundTransparency = 1
		ascIcon.Image = "rbxassetid://82713441014157"  -- Imagen deseada
		ascIcon.ImageColor3 = Color3.fromRGB(255,255,255)
		ascIcon.Parent = ascEffect
		ascIcon.ZIndex = 103
		ascContainer.ascIcon = ascIcon
		
		local ascIconGradient = Instance.new("UIGradient", ascIcon)
		ascIconGradient.Rotation = 90
		ascIconGradient.Color = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(0,0,0)),
			ColorSequenceKeypoint.new(0.5, Color3.fromRGB(150,150,150)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(0,0,0))
		})
		
		-- Se crea el botón para detectar clics en el contenedor
		local ascButtonObj = Instance.new("ImageButton")
		ascButtonObj.Size = UDim2.new(1,0,1,0)
		ascButtonObj.Position = UDim2.new(0,0,0,0)
		ascButtonObj.BackgroundTransparency = 1
		ascButtonObj.Parent = ascContainer
		ascButtonObj.Draggable = true
		ascButtonObj.Active = true
		ascButtonObj.ZIndex = 105
		
		ascButtonObj.MouseButton1Down:Connect(function()
			if gliding and energy > 0 then
				holdingJump = true
				-- Cambiar overlay a verde en el icono y efecto
				ascIcon.ImageColor3 = Color3.new(0,1,0)
				ascEffectGradient.Color = ColorSequence.new({
					ColorSequenceKeypoint.new(0, Color3.new(0,1,0)),
					ColorSequenceKeypoint.new(1, Color3.new(0,0.5,0))
				})
				ascendTrack:Play()
			end
		end)
		ascButtonObj.MouseButton1Up:Connect(function()
			if gliding then
				holdingJump = false
				ascIcon.ImageColor3 = Color3.fromRGB(255,255,255)
				ascEffectGradient.Color = ColorSequence.new({
					ColorSequenceKeypoint.new(0, Color3.fromRGB(255,255,255)),
					ColorSequenceKeypoint.new(1, Color3.fromRGB(255,255,255))
				})
				ascendTrack:Stop()
			end
		end)
		
		return ascContainer
	end
	
	---------------------------------------------------------------------
	-- Función para manejar el cooldown
	local function startCooldown(duration)
		if cooldownActive then return end
		cooldownActive = true
		cooldownText.Visible = true
		effectFrameGradient.Color = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(255,255,255)),
			ColorSequenceKeypoint.new(0.5, Color3.fromRGB(255,0,0)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(255,255,255))
		})
		for i = duration, 1, -1 do
			cooldownText.Text = tostring(i)
			task.wait(1)
		end
		cooldownText.Visible = false
		cooldownActive = false
		cooldown = false
		effectFrameGradient.Color = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(255,255,255)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(255,255,255))
		})
	end
	
	local function stopGlide()
		if not gliding then return end
		gliding = false
		energyGui.Enabled = false
		if ascendButton then
			ascendButton:Destroy()
			ascendButton = nil
		end
		if glideForce then
			glideForce:Destroy()
		end
		normalGlideTrack:Stop()
		ascendTrack:Stop()
		descendTrack:Stop()
		glideSound:Stop()
		cooldown = true
		startCooldown(35)
	end
	
	local function activateGlide()
		if cooldown or not canUseGlide() then return end
		if humanoid:GetState() ~= Enum.HumanoidStateType.Freefall then return end
		
		gliding = true
		energy = ENERGY_DURATION
		energyGui.Enabled = true
		
		local hrp = player.Character:WaitForChild("HumanoidRootPart")
		glideForce = Instance.new("BodyVelocity")
		glideForce.Name = "GlideForce"
		glideForce.MaxForce = Vector3.new(0, FLOAT_FORCE, 0)
		glideForce.Velocity = Vector3.new(0, DESCEND_SPEED, 0)
		glideForce.Parent = hrp
		
		normalGlideTrack:Play()
		glideSound:Play()
		
		local currentVel = hrp.Velocity
		local boostedVel = Vector3.new(currentVel.X * speedBoost, glideForce.Velocity.Y, currentVel.Z * speedBoost)
		glideForce.Velocity = boostedVel
		
		if not ascendButton then
			ascendButton = createAscendButton()
		end
	end
	
	---------------------------------------------------------------------
	-- Conexiones de entrada para activar/desactivar Glide con el botón y la tecla P
	local UserInputService = game:GetService("UserInputService")
	
	glideButton.MouseButton1Click:Connect(function()
		if gliding then
			stopGlide()
		else
			activateGlide()
		end
	end)
	
	UserInputService.InputBegan:Connect(function(input, gameProcessed)
		if gameProcessed then return end
		if input.KeyCode == Enum.KeyCode.P then
			if gliding then
				stopGlide()
			else
				activateGlide()
			end
		end
	end)
	
	humanoid.StateChanged:Connect(function(_, newState)
		if newState == Enum.HumanoidStateType.Landed and gliding then
			stopGlide()
		end
	end)
	
	---------------------------------------------------------------------
	-- Bucle principal del Glide
	game:GetService("RunService").RenderStepped:Connect(function(dt)
		if gliding and glideForce and player.Character then
			local drain = holdingJump and (ENERGY_DRAIN_RATE * ASCEND_DRAIN_MULTIPLIER) or ENERGY_DRAIN_RATE
			energy = energy - dt * drain
			if energy < 0 then energy = 0 end
			
			local percent = energy / ENERGY_DURATION
			energyBar.Size = UDim2.new(percent, 0, 1, 0)
			
			-- Interpolación del gradiente del relleno de naranja a gris/negro
			local startColor = Color3.fromRGB(255,165,0) -- naranja
			local endColor = Color3.fromRGB(128,128,128)  -- gris
			local topColor = startColor:Lerp(endColor, 1 - percent)
			
			local bottomStart = Color3.fromRGB(255,69,0)   -- naranja rojizo
			local bottomEnd = Color3.fromRGB(0,0,0)         -- negro
			local bottomColor = bottomStart:Lerp(bottomEnd, 1 - percent)
			
			fillGradient.Color = ColorSequence.new({
				ColorSequenceKeypoint.new(0, topColor),
				ColorSequenceKeypoint.new(1, bottomColor)
			})
			
			local hrp = player.Character:WaitForChild("HumanoidRootPart")
			
			-- Si se agota la energía, forzar descenso y detener animación de ascenso
			if energy <= 0 then
				if holdingJump then
					holdingJump = false
					if ascendButton then
						if ascendButton.ascIcon then
							ascendButton.ascIcon.ImageColor3 = Color3.fromRGB(255,255,255)
						end
						ascendTrack:Stop()
					end
				end
				if not descendTrack.IsPlaying then
					descendTrack:Play()
				end
				glideForce.Velocity = Vector3.new(hrp.Velocity.X * speedBoost, FASTER_DESCEND_SPEED, hrp.Velocity.Z * speedBoost)
			else
				if holdingJump then
					glideForce.Velocity = Vector3.new(hrp.Velocity.X * speedBoost, ASCEND_SPEED, hrp.Velocity.Z * speedBoost)
				else
					glideForce.Velocity = Vector3.new(hrp.Velocity.X * speedBoost, DESCEND_SPEED, hrp.Velocity.Z * speedBoost)
				end
			end
		end
	end)
	
	-- Se elimina la conexión a characterValue, ya que no se utiliza
end
